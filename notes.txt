songuard
https://github.com/willworth/songuardjs.git















========below are cory's js build course notes===
NOTES!
.editorconfig
put in root of project

create packages.json and then npm install gets all the dependencies


security of node packages?
node security platform
global install is as follows
npm install -g nsp

then to run nsp check
in terminal ctrl c to kill process... if you're gonna reload express or whatevs

for sharing

localtunnel(easiest), ngrok(secure), now(persistent) surge(static only)

localtunnel can take a subdomain eg will.localtunnel.me


=================AUTOMATION==========
grunt was first, file oriented, json.
gulp is fast
npm scripts  fewer dependencies, use tools directly

so scripts are defined in package.json
npm scripts support pre post hooks - so prestart will run before start...
for parallel running of scripts:
 "start": "npm-run-all --parallel security-check open:src",

 use npm start -s (silent) to cut down the noise


 =============bundlers=======
Good authors divide their books into chapters and sections; good programmers divide their programs into modules.

we then bundle them back together to reduce process load etc

webpack allows you to bundle much more than just js
css images fonts html
hot reloading
bundle splitting

=========sourcemaps!======
how to debug transpiled bundled code
only downloaded if you open dev tools

===========linters================
keep track of coding standards
forces consistency curly braces etc
http://eslint.org/  is now the default
0 off 1 warning 2 error
eslint lacks watch functionality
need to set up in package.json
esw =eslintWATCH =npm package see line 9
make sure to disable any built in linting plugins
npm run lint
// eslint-disable-line no-console
 "lint:watch": "npm run lint -- --watch",

 ======testing and continious integration========
unit tests work on single functions or modules
also worth being aware of
integration testing
which is interaction between modules
and automated ui testing
simulates clicks etc in ui see https://en.wikipedia.org/wiki/Selenium_(software)

6 important questions for unit test set up
1 framework
2 assertion library
3 helper libraries
4 where to run tests
5 where to place tests6
6 when to run tests

which framework?
mocha most popular
jest is from fb and pop with react
it's a wrapper for jasmine
all are ok.  think of gyms.  just go

which assertion library
assert 3+3=6 etc
most pop is chai
should.js
npm expect

which helper library?
jsdom is an implementation of dom for node
cheerio is jquery for the server

where to run tests?
browser -karma, testem
headless browser-  phantomjs
in memory dom   -jsdom  -lighter weight version of phantomjs

where should i put all my test?

centralised
mocha suggests this.  less noise in src folder???  not a great approach for js apps

alongside
easy import.  always ./file
clear visibility for tests
convenient to open together
no recreating folder scruture
easier to refactor

when should our tests run?
whenever you hit save
facilitates tdd
auto = low friction
increases test visibility
but this is just unit tests.  integration tests are slower

====cont int options======
travis, appveyor, jenkins, semaphore, snapci

travis and jenkins are most popular
travis ci   unix
appveyor win

both need a .yml file in root
https://ci.appveyor.com/tools/validate-yaml
not working!


===========http calls============

make fake api calls in development

mock data with json schema faker
json server

======project structure========
demo app is good as it gives examples of
dir structure
framework usage
testing
mock api
automated deployment

===tips!====
js in a js file!
otherwise cant test lint reuse transpile import explicit dependencies
don't use a server side tool to dynamically build the js.  build json instead

consider organising by feature instead of by file type on large projects

extract logic as far as possible into plain old javascript (pojo)
not tied to any framework
=======production build===========

minification
bundle splitting
cache busting - set http headers to say js not expire for upto a year

====error logging=====
does it provide good metadata? Stack traces, browser etc
track js
https://app.pluralsight.com/player?course=javascript-development-environment&author=cory-house&name=javascript-development-environment-m12&clip=14&mode=live

use embeddedjs to alter html to only inject track js in prod build

=====prod deploy=====
recommends separating static front end ui from api
can use cheap hosting
change api stack without probs
separating concerns
https://surge.sh/  for static front end
